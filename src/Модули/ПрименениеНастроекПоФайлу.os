#Область ОписаниеПеременных

Перем _КешПравил;
Перем _КешУровнейПоддержки;
Перем _ФайлыСИсходнымКодом;

Перем _ДанныеПоддержкиПоИсходникам;
Перем _ДанныеФильтраПоПодсистемам;
Перем _УдалятьПоддержку;

Перем _КаталогИсходников; // Каталог исходников по умолчанию

Перем _Лог;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(Знач КаталогиИсходников, Знач пУдалятьПоддержку, Знач пФильтрПоПодсистемам, Знач пЛог) Экспорт
	
	_Лог = пЛог;

	_УдалятьПоддержку = пУдалятьПоддержку;
	
	Если КаталогиИсходников.Количество() = 0 Тогда
		
		_лог.Ошибка("Каталог исходников не существует. Файлы на поддержке удалены не будут");
		_УдалятьПоддержку = Неопределено;
		_КаталогИсходников = "";
		
	Иначе
		
		_КаталогИсходников = КаталогиИсходников[0];
		
	КонецЕсли;
	
	Если НЕ пУдалятьПоддержку = Неопределено Тогда
		
		_ДанныеПоддержкиПоИсходникам = Новый Соответствие;
		
		Для Каждого цКаталог Из КаталогиИсходников Цикл
			
			приведенныйПуть = СтрЗаменить(НРег(цКаталог), "\", "/"); // Чтобы при сравнении не расходились слеши
			
			_ДанныеПоддержкиПоИсходникам.Вставить(приведенныйПуть, Новый Поддержка(цКаталог));
			
		КонецЦикла;
		
	КонецЕсли;
	
	_ДанныеФильтраПоПодсистемам = ПодготовитьФильтрПоПодсистемам(пФильтрПоПодсистемам);
	
КонецПроцедуры

Функция ПустойРезультатПримененияПравил() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);
	Результат.Вставить("ПропущенныеПравила", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

Функция НастройкаПрименима(Знач пСтрока, Знач пШаблон) Экспорт
	
	Если пСтрока = пШаблон Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(пШаблон) Тогда
		Возврат Истина;
	КонецЕсли;
	
	значениеИзКеша = ПолучитьИзКеша(пСтрока, пШаблон);
	
	Если НЕ значениеИзКеша = Неопределено Тогда
		
		Возврат значениеИзКеша;
		
	КонецЕсли;
	
	этоПоискПоРегВыр = СтрНайти(пШаблон, "*") > 0; // Для оптимизации считаем, что если и используются рег. выражения, то со звездой
	
	Если этоПоискПоРегВыр Тогда
		
		Попытка
			
			регВыражение = Новый РегулярноеВыражение(пШаблон);
			настройкаПрименима = регВыражение.Совпадает(пСтрока);
			
		Исключение
			
			_Лог.Ошибка("Ошибка сравнения ""%1"" с рег. выражением ""%2""", пСтрока, пШаблон);
			_Лог.Ошибка(ОписаниеОшибки());
			настройкаПрименима = Ложь;
			
		КонецПопытки;
		
	Иначе
		
		настройкаПрименима = Ложь;
		
	КонецЕсли;
	
	ПоместитьВКеш(пСтрока, пШаблон, настройкаПрименима);
	
	Возврат настройкаПрименима;
	
КонецФункции

Функция ФайлНаПоддержке(Знач пИмяФайла) Экспорт
	
	Если _УдалятьПоддержку = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	значениеИзКеша = _КешУровнейПоддержки[пИмяФайла];
	
	Если НЕ значениеИзКеша = Неопределено Тогда
		Возврат значениеИзКеша;
	КонецЕсли;
	
	путьКФайлу = ОбеспечитьПутьКФайлуСИсходнымКодом(пИмяФайла);
	
	даныеПоддержки = ДанныеПоддержкиДляФайла(путьКФайлу);
	
	Если даныеПоддержки = Неопределено Тогда
		_КешУровнейПоддержки.Вставить(пИмяФайла, Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	текУровень = даныеПоддержки.Уровень(путьКФайлу);
	
	файлНаПоддержке = текУровень <= _УдалятьПоддержку;
	
	_КешУровнейПоддержки.Вставить(пИмяФайла, файлНаПоддержке);
	
	Если ФайлНаПоддержке Тогда
		
		_Лог.Отладка("Файл %1 на поддержке. Замечания по нему удалены", пИмяФайла);
		
	КонецЕсли;
	
	Возврат файлНаПоддержке;
	
КонецФункции

Функция ПравилоПропущено(пЗамечание, пПропущенныеПравила) Экспорт
	
	ПравилоПропущено = Ложь;
	
	Если пПропущенныеПравила = Неопределено Тогда
		Возврат ПравилоПропущено;
	КонецЕсли;
	
	ПравилоПропущено = НЕ пПропущенныеПравила.Найти(пЗамечание.ruleId) = Неопределено;
	
	Возврат ПравилоПропущено;
	
КонецФункции

Функция ОбеспечитьПутьКФайлуСИсходнымКодом(Знач пИмяФайла) Экспорт
	
	существующийПуть = _ФайлыСИсходнымКодом[пИмяФайла];
	
	Если НЕ существующийПуть = Неопределено Тогда
		
		Возврат существующийПуть;
		
	КонецЕсли;
	
	абсолютныйПутьКФайлу = ОбщегоНазначения.АбсолютныйПуть(пИмяФайла);
	
	Если ОбщегоНазначения.ФайлСуществует(абсолютныйПутьКФайлу)
		ИЛИ ВРег(абсолютныйПутьКФайлу) = ВРег(СтрЗаменить(пИмяФайла, "\", "/")) // может быть указан абсолютный путь и файл не существовать
		Тогда
		
		_ФайлыСИсходнымКодом.Вставить(пИмяФайла, абсолютныйПутьКФайлу);
		Возврат абсолютныйПутьКФайлу;
		
	КонецЕсли;
	
	путьСУчетомКаталогаИсходников = ОбъединитьПути(_КаталогИсходников, пИмяФайла);
	
	абсолютныйПутьКФайлу = ОбщегоНазначения.АбсолютныйПуть(путьСУчетомКаталогаИсходников);
	
	Если ОбщегоНазначения.ФайлСуществует(абсолютныйПутьКФайлу) Тогда
		
		_ФайлыСИсходнымКодом.Вставить(пИмяФайла, абсолютныйПутьКФайлу);
		Возврат абсолютныйПутьКФайлу;
		
	КонецЕсли;
	
	_ФайлыСИсходнымКодом.Вставить(пИмяФайла, пИмяФайла);
	Возврат пИмяФайла;
	
КонецФункции


Функция ИсключитьЗамечаниеФильтромПоПодсистеме(Знач пИмяФайла) Экспорт
	
	Если НЕ _ДанныеФильтраПоПодсистемам.ЕстьОтбор
		И НЕ _ДанныеФильтраПоПодсистемам.ЕстьИсключения Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	путьКФайлу = ОбеспечитьПутьКФайлуСИсходнымКодом(пИмяФайла);
	
	значениеКеша = _ДанныеФильтраПоПодсистемам.КешФайлов[путьКФайлу];
	
	Если НЕ значениеКеша = Неопределено Тогда
		
		Возврат значениеКеша;
		
	КонецЕсли;
	
	Если _ДанныеФильтраПоПодсистемам.ЕстьОтбор Тогда
		
		Для Каждого цРазрешенныйОбъект Из _ДанныеФильтраПоПодсистемам.Отбор Цикл
			
			Если СтрНачинаетсяС(путьКФайлу, цРазрешенныйОбъект) Тогда
				
				_ДанныеФильтраПоПодсистемам.КешФайлов.Вставить(путьКФайлу, Ложь);
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если _ДанныеФильтраПоПодсистемам.ЕстьИсключения Тогда
		
		Для Каждого цРазрешенныйОбъект Из _ДанныеФильтраПоПодсистемам.Исключения Цикл
			
			Если СтрНачинаетсяС(путьКФайлу, цРазрешенныйОбъект) Тогда
				
				_ДанныеФильтраПоПодсистемам.КешФайлов.Вставить(путьКФайлу, Истина);
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеПоддержкиДляФайла(Знач ПутьКФайлу)
	
	Для Каждого цКлючИЗначение Из _ДанныеПоддержкиПоИсходникам Цикл
		
		приведенныйПутьКФайлу = СтрЗаменить(НРег(ПутьКФайлу), "\", "/");
		
		Если СтрНачинаетсяС(приведенныйПутьКФайлу, цКлючИЗначение.Ключ) Тогда
			Возврат цКлючИЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	_лог.Предупреждение("Не удалось получить данные поддержки для файла %1", ПутьКФайлу);
	
	массивИсточников = Новый Массив;
	Для Каждого цКлючИЗначение Из _ДанныеПоддержкиПоИсходникам Цикл
		
		массивИсточников.Добавить(цКлючИЗначение.Ключ);
		
	КонецЦикла;
	
	_лог.Предупреждение("	Доступные источники: [%1]", СтрСоединить(массивИсточников, ", "));
	
	Возврат Неопределено;
	
КонецФункции

#Область Кеш

Функция ПолучитьИзКеша(Знач пСтрока, Знач пШаблон)
	
	ИнициализироватьКеш(пСтрока, пШаблон);
	
	Возврат _КешПравил[пШаблон][пСтрока];
	
КонецФункции

Процедура ПоместитьВКеш(Знач пСтрока, Знач пШаблон, Знач пЗначение)
	
	ИнициализироватьКеш(пСтрока, пШаблон);
	
	_КешПравил[пШаблон].Вставить(пСтрока, пЗначение);
	
КонецПроцедуры

Процедура ИнициализироватьКеш(Знач пСтрока, Знач пШаблон)
	
	КешПоШаблону = _КешПравил[пШаблон];
	
	Если КешПоШаблону = Неопределено Тогда
		
		КешПоШаблону = Новый Соответствие;
		_КешПравил.Вставить(пШаблон, КешПоШаблону);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПодготовитьФильтрПоПодсистемам(Знач пФильтрПоПодсистемам)
	
	данныеФильтраПоПодсистемам = Новый Структура;
	
	данныеФильтраПоПодсистемам.Вставить("ЕстьОтбор", Ложь);
	данныеФильтраПоПодсистемам.Вставить("ЕстьИсключения", Ложь);
	
	Если НЕ ЗначениеЗаполнено(пФильтрПоПодсистемам) Тогда
		
		Возврат данныеФильтраПоПодсистемам;
		
	КонецЕсли;
	
	инфоОКонфигурации = Новый ИнформацияОКонфигурации(_КаталогИсходников);
	
	пФильтрПоПодсистемам = СтрЗаменить(пФильтрПоПодсистемам, ";", ",");
	
	объектыОтбор = Новый Соответствие;
	объектыИсключения = Новый Соответствие;
	
	ОПЕРАЦИЯ_ДОБАВЛЕНИЕ = "+";
	ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ = "-";
	
	Для Каждого цПодсистема Из СтрРазделить(пФильтрПоПодсистемам, ",") Цикл
		
		имяПодсистемы = СтрЗаменить(цПодсистема, """", "");
		
		_лог.Информация("Обработка фрагмента: %1", имяПодсистемы);
		
		Если СтрНачинаетсяС(имяПодсистемы, "-") Тогда
			
			операция = ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ;
			
		Иначе
			
			операция = ОПЕРАЦИЯ_ДОБАВЛЕНИЕ;
			
		КонецЕсли;
		
		учитыватьРодительскиеПодсистемы = СтрНайти(имяПодсистемы, "^") > 0;
		учитыватьПодчиненныеПодсистемы = СтрНайти(имяПодсистемы, "*") > 0;
		
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "+", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "-", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "*", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "^", "");
		
		объекты = инфоОКонфигурации.ОбъектыПодсистемы(имяПодсистемы, учитыватьПодчиненныеПодсистемы, учитыватьРодительскиеПодсистемы);
		
		Если операция = ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ Тогда
			
			ЗаполнитьСоответствиеПоМассиву(объектыИсключения, объекты);
			УдалитьЭлементыСоответствия(объектыОтбор, объекты);
			
			данныеФильтраПоПодсистемам.Вставить("ЕстьИсключения", Истина);
			
			_лог.Информация("	Добавлены объекты к исключению по подсистеме %1: %2", имяПодсистемы, объекты.Количество());
			
		Иначе
			
			ЗаполнитьСоответствиеПоМассиву(объектыОтбор, объекты);
			УдалитьЭлементыСоответствия(объектыИсключения, объекты);
			
			данныеФильтраПоПодсистемам.Вставить("ЕстьОтбор", Истина);
			
			_лог.Информация("	Добавлены объекты к отбору по подсистеме %1: %2", имяПодсистемы, объекты.Количество());
			
		КонецЕсли;
		
	КонецЦикла;
	
	ГенераторПутей = Новый Путь1СПоМетаданным(_КаталогИсходников);
	
	данныеФильтраПоПодсистемам.Вставить("Отбор", МассивПутейОбъектов(объектыОтбор, ГенераторПутей));
	данныеФильтраПоПодсистемам.Вставить("Исключения", МассивПутейОбъектов(объектыИсключения, ГенераторПутей));
	
	данныеФильтраПоПодсистемам.Вставить("КешФайлов", Новый Соответствие);
	
	_лог.Информация("К отбору по подсистемам: %1", данныеФильтраПоПодсистемам.Отбор.Количество());
	
	Для Каждого цОбъект Из данныеФильтраПоПодсистемам.Отбор Цикл
		
		_лог.Отладка("	Добавлено к отбору: %1", цОбъект);
		
	КонецЦикла;
	
	_лог.Информация("К исключению по подсистемам: %1", данныеФильтраПоПодсистемам.Исключения.Количество());
	
	Для Каждого цОбъект Из данныеФильтраПоПодсистемам.Исключения Цикл
		
		_лог.Отладка("	Добавлено к исключению: %1", цОбъект);
		
	КонецЦикла;
	
	Возврат данныеФильтраПоПодсистемам;
	
КонецФункции

Функция МассивПутейОбъектов(Знач пСоответствиеСПутями, Знач пГенераторПутей)
	
	массивПутей = Новый Массив;
	
	Для Каждого цЭлемент Из пСоответствиеСПутями Цикл
		
		путьКОбъекту = пГенераторПутей.Путь(цЭлемент.Ключ);
		путьКОбъекту = ОбщегоНазначения.АбсолютныйПуть(путьКОбъекту);
		
		Если ОбщегоНазначения.КаталогСуществует(путьКОбъекту) Тогда
			
			массивПутей.Добавить(путьКОбъекту + "/");
			
		Иначе
			
			_Лог.Ошибка("Фильтр по подсистемам. Не удалось получить путь к <%1>. Полученный путь %2 не существует.", цЭлемент.Ключ, путьКОбъекту);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат массивПутей;
	
КонецФункции

Процедура ЗаполнитьСоответствиеПоМассиву(пСоответствие, Знач пМассив)
	
	Для Каждого цЭлемент Из пМассив Цикл
		
		пСоответствие.Вставить(цЭлемент, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементыСоответствия(пСоответствие, Знач пМассив)
	
	Для Каждого цЭлемент Из пМассив Цикл
		
		Если НЕ пСоответствие[цЭлемент] = Неопределено Тогда
			
			пСоответствие.Удалить(цЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

_КешУровнейПоддержки = Новый Соответствие;
_КешПравил = Новый Соответствие;
_ФайлыСИсходнымКодом = Новый Соответствие;