
Функция ЭлементНастройки_Generic_Issue() Экспорт
	
	структ = Новый Структура;
	
	структ.Вставить("ruleId", "");
	структ.Вставить("message", "");
	структ.Вставить("filePath", "");
	структ.Вставить("effortMinutes", 0);
	структ.Вставить("severity", "");
	структ.Вставить("cleanCodeAttribute", "");
	структ.Вставить("softwareQuality", "");
	
	Возврат структ;
	
КонецФункции

Функция ПереопределяемыеПараметрыОшибки() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("severity", "");
	Структура.Вставить("cleanCodeAttribute", "");
	Структура.Вставить("softwareQuality", "");
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьВНастройкиЗначенияИзФайла(Настройки, Знач Файл, Знач Лог) Экспорт
	
	ошибкиФайла = ОбщегоНазначения.ПрочитатьJSONФайл(Файл, Лог);
	
	Если НЕ ТипЗнч(ошибкиФайла) = Тип("Структура")
		ИЛИ НЕ ошибкиФайла.Свойство("issues")
		ИЛИ НЕ ТипЗнч(ошибкиФайла.issues) = Тип("Массив") Тогда
		
		Лог.Ошибка("Не поддерживаемая структура файла: " + Файл);
		Возврат;
		
	КонецЕсли;

	Если НЕ ошибкиФайла.Свойство("rules")
		ИЛИ НЕ ТипЗнч(ошибкиФайла.rules) = Тип("Массив") Тогда
		
		Лог.Ошибка("Не поддерживаемая структура файла: " + Файл);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого цОшибка Из ошибкиФайла.issues Цикл
		
		прочитанныеНастройки = ПереопределяемыеПараметрыОшибки();
		ЗаполнитьЗначенияСвойств(прочитанныеНастройки, цОшибка);
		
		Настройки.Ишузы.Вставить(цОшибка.ruleId, прочитанныеНастройки);
		
	КонецЦикла;
	
	Для Каждого цПравило Из ошибкиФайла.rules Цикл
		
		Если цПравило.impacts.Количество() = 0 Тогда
			
			Лог.Ошибка("Неподдерживаемая структура файла: " + Файл);
			Продолжить;
			
		КонецЕсли;
		
		параметрыПравила = ПереопределяемыеПараметрыОшибки();
		параметрыПравила.cleanCodeAttribute = цПравило.cleanCodeAttribute;
		параметрыПравила.softwareQuality = цПравило.impacts[0].softwareQuality;
		параметрыПравила.severity = цПравило.impacts[0].severity;
		
		Настройки.Правила.Вставить(цПравило.Id, параметрыПравила);
		
	КонецЦикла;
	
КонецПроцедуры