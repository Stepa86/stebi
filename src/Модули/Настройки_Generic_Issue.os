#Область ОписаниеПеременных

Перем ВАЖНОСТЬ_ПРОПУСТИТЬ;
Перем ДОСТУПНЫЕ_ВАЖНОСТИ;
Перем ДОСТУПНЫЕ_ТИПЫ;

Перем _Лог;

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура Инициализировать(Знач КаталогиИсходников, Знач пУдалятьПоддержку, Знач пФильтрПоПодсистемам, Знач пЛог) Экспорт
	
	ВАЖНОСТЬ_ПРОПУСТИТЬ = "SKIP";
	ДОСТУПНЫЕ_ВАЖНОСТИ = Новый Массив;
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("BLOCKER");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("CRITICAL");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MAJOR");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MINOR");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("INFO");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("SKIP");
	
	ДОСТУПНЫЕ_ТИПЫ = Новый Массив;
	ДОСТУПНЫЕ_ТИПЫ.Добавить("BUG");
	ДОСТУПНЫЕ_ТИПЫ.Добавить("VULNERABILITY");
	ДОСТУПНЫЕ_ТИПЫ.Добавить("CODE_SMELL");
	
	ПрименениеНастроекПоФайлу.Инициализировать(КаталогиИсходников, пУдалятьПоддержку, пФильтрПоПодсистемам, пЛог);
	
	_Лог = пЛог;

КонецПроцедуры

Функция ПрименитьНастройкиКПравилам(замечанияФайла, таблицаНастроек) Экспорт
	
	Возврат ПрименениеНастроекПоФайлу.ПустойРезультатПримененияПравил();
	
КонецФункции

Функция ПрименитьНастройкиКЗамечаниям(замечанияФайла, таблицаНастроек, пропущенныеПравила = Неопределено) Экспорт
	
	файлИзменен = Ложь;
	
	всегоЗамечаний = замечанияФайла.issues.Количество();
	
	Для ц = 1 По всегоЗамечаний Цикл
		
		цЗамечание = замечанияФайла.issues[всегоЗамечаний - ц];
		
		Если ОшибкаВЗамечании(цЗамечание)
			ИЛИ ФайлНаПоддержке(цЗамечание)
			ИЛИ ИсключитьЗамечаниеФильтромПоПодсистеме(цЗамечание)
			ИЛИ ПрименениеНастроекПоФайлу.ПравилоПропущено(цЗамечание, пропущенныеПравила) Тогда
			
			замечанияФайла.issues.Удалить(всегоЗамечаний - ц);
			файлИзменен = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если ПрименитьНастройкиКЗамечанию(цЗамечание, таблицаНастроек) Тогда
			
			файлИзменен = Истина;
			
		КонецЕсли;
		
		Если цЗамечание.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
			
			замечанияФайла.issues.Удалить(всегоЗамечаний - ц);
			файлИзменен = Истина;
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат файлИзменен;
	
КонецФункции

Функция ЭлементНастройки_Generic_Issue() Экспорт
	
	структ = Новый Структура;
	
	структ.Вставить("ruleId", "");
	структ.Вставить("message", "");
	структ.Вставить("filePath", "");
	структ.Вставить("severity", "");
	структ.Вставить("type", "");
	структ.Вставить("effortMinutes", 0);
	
	Возврат структ;
	
КонецФункции

Функция ПереопределяемыеПараметрыОшибки() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("severity", ""); // 10.2-
	Структура.Вставить("type", ""); // 10.2-
	Структура.Вставить("effortMinutes", 0);
	
	Возврат Структура;
	
КонецФункции

Процедура ДобавитьВНастройкиЗначенияИзФайла(Настройки, Знач Файл, Знач Лог) Экспорт
	
	ошибкиФайла = ОбщегоНазначения.ПрочитатьJSONФайл(Файл, Лог);
	
	Если НЕ ТипЗнч(ошибкиФайла) = Тип("Структура")
		ИЛИ НЕ ошибкиФайла.Свойство("issues")
		ИЛИ НЕ ТипЗнч(ошибкиФайла.issues) = Тип("Массив") Тогда
		
		Лог.Ошибка("Не поддерживаемая структура файла: " + Файл);
		Возврат;
		
	КонецЕсли;
	
	Для Каждого цОшибка Из ошибкиФайла.issues Цикл
		
		прочитанныеНастройки = ПереопределяемыеПараметрыОшибки();
		ЗаполнитьЗначенияСвойств(прочитанныеНастройки, цОшибка);
		
		Настройки.Ишузы.Вставить(цОшибка.ruleId, прочитанныеНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОшибкаВЗамечании(Знач пОшибка)
	
	путьКФайлу = пОшибка.primaryLocation.filePath;
	
	Если НЕ ЗначениеЗаполнено(путьКФайлу) Тогда
		
		_Лог.Ошибка("Не указан путь для ошибки: %1. %2", пОшибка.ruleId, пОшибка.primaryLocation.message);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ФайлНаПоддержке(Знач пОшибка)
	
	Возврат ПрименениеНастроекПоФайлу.ФайлНаПоддержке(пОшибка.primaryLocation.filePath);
	
КонецФункции

Функция ИсключитьЗамечаниеФильтромПоПодсистеме(Знач пОшибка)
	
	Возврат ПрименениеНастроекПоФайлу.ИсключитьЗамечаниеФильтромПоПодсистеме(пОшибка.primaryLocation.filePath);

КонецФункции

Функция ПрименитьНастройкиКЗамечанию(пОшибка, таблицаНастроек)
	
	естьИзменения = Ложь;
	
	ruleId = пОшибка.ruleId;
	message = пОшибка.primaryLocation.message;
	
	filePath = ПутьКФайлуСЗамечаниями(пОшибка);
	
	Для Каждого цСтрока Из таблицаНастроек Цикл
		
		Если пОшибка.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
			// Пропуск работает по принципу - применяем первое попавшееся,
			// когда как остальные настройки - последнее попавшееся.
			Прервать;
		КонецЕсли;
		
		Если ПрименениеНастроекПоФайлу.НастройкаПрименима(ruleId, цСтрока.ruleId)
			И ПрименениеНастроекПоФайлу.НастройкаПрименима(filePath, цСтрока.filePath)
			И ПрименениеНастроекПоФайлу.НастройкаПрименима(message, цСтрока.message) Тогда
			
			Если ПрименитьНастройкуКЗамечанию(цСтрока, пОшибка) Тогда
				естьИзменения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат естьИзменения;
	
КонецФункции

Функция ПрименитьНастройкуКЗамечанию(Знач пСтрокаНастроек, пОшибка)
	
	естьИзменения = Ложь;
	заголовокЛога = СтрШаблон("ruleId: <%1>, message: <%2>, filePath: <%3>. Установлено ",
			пОшибка.ruleId,
			пОшибка.primaryLocation.message,
			пОшибка.primaryLocation.filePath);
	
	Если пОшибка.Свойство("effortMinutes")
		И ЗначениеЗаполнено(пОшибка.effortMinutes) Тогда
		
		затратыНаОшибку = пОшибка.effortMinutes;
		
	Иначе
		
		затратыНаОшибку = 0;

	КонецЕсли;

	Если ТипЗнч(пСтрокаНастроек.effortMinutes) = Тип("Число")
		И Не пСтрокаНастроек.effortMinutes = затратыНаОшибку Тогда
		
		_лог.Отладка(заголовокЛога + "effortMinutes: " + пСтрокаНастроек.effortMinutes);
		
		пОшибка.Вставить("effortMinutes", пСтрокаНастроек.effortMinutes);
		естьИзменения = Истина;
		
	КонецЕсли;
	
	Если НЕ пСтрокаНастроек.severity = пОшибка.severity
		И НЕ ДОСТУПНЫЕ_ВАЖНОСТИ.Найти(пСтрокаНастроек.severity) = Неопределено Тогда
		
		_лог.Отладка(заголовокЛога + "severity: " + пСтрокаНастроек.severity);
		
		пОшибка.severity = пСтрокаНастроек.severity;
		естьИзменения = Истина;
		
	КонецЕсли;
	
	Если НЕ пСтрокаНастроек.type = пОшибка.type
		И НЕ ДОСТУПНЫЕ_ТИПЫ.Найти(пСтрокаНастроек.type) = Неопределено Тогда
		
		_лог.Отладка(заголовокЛога + "type: " + пСтрокаНастроек.type);
		
		пОшибка.type = пСтрокаНастроек.type;
		естьИзменения = Истина;
		
	КонецЕсли;
	
	Возврат естьИзменения;
	
КонецФункции

Функция ПутьКФайлуСЗамечаниями(пОшибка)
	
	путьКФайлуСЗамечанием = пОшибка.primaryLocation.filePath;
	
	filePath = ПрименениеНастроекПоФайлу.ОбеспечитьПутьКФайлуСИсходнымКодом(путьКФайлуСЗамечанием);
	
	Возврат filePath;
	
КонецФункции

#КонецОбласти