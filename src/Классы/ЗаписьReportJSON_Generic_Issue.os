#Область ОписаниеПеременных

Перем _Лог;
Перем ГенераторЗамечаний_Generic_Issue;

#КонецОбласти

Процедура ПриСозданииОбъекта(Знач пЛог, Знач пИспользоватьОтносительныеПути = Ложь)
	
	_Лог = пЛог;
	ГенераторЗамечаний_Generic_Issue = Новый ГенераторЗамечаний_Generic_Issue(пЛог, пИспользоватьОтносительныеПути);
	
КонецПроцедуры

Функция ДанныеФайлаПоТаблицеРезультатов(Знач пТаблицаРезультатовПроверки) Экспорт
	
	результатПроверки = РезультатПроверкиОбщийФорматОтчета(пТаблицаРезультатовПроверки);
	
	_Лог.Информация(
		"Подготовлено к записи в джсон ошибок: %1, правил: %2",
		результатПроверки.issues.Количество(),
		результатПроверки.rules.Количество());
	
	Возврат результатПроверки;
	
КонецФункции

Функция РезультатПроверкиОбщийФорматОтчета(пТаблицаРезультатовПроверки)
	
	результат = Новый Структура;
	результат.Вставить("issues", Новый Массив);
	результат.Вставить("rules", Новый Массив);
	
	источникПроверки = ГенераторЗамечаний_Generic_Issue.ИсточникПроверки();
	существующиеПравила = Новый Соответствие;
	
	Для Каждого цСтрока Из пТаблицаРезультатовПроверки Цикл
		
		ruleId = цСтрока.ИдентификаторПравила;
		
		Если НЕ ЗначениеЗаполнено(ruleId) Тогда
			_Лог.Предупреждение("Пустой ruleId для %1", ГенераторЗамечаний_Generic_Issue.СообщениеОбОшибке(цСтрока));
		КонецЕсли;
		
		структОшибка = Новый Структура;
		структОшибка.Вставить("engineId", источникПроверки);
		структОшибка.Вставить("ruleId", ruleId);
		структОшибка.Вставить("primaryLocation", ГенераторЗамечаний_Generic_Issue.МестонахождениеОшибки(цСтрока));
		структОшибка.Вставить("type", ТипОшибки(цСтрока));
		структОшибка.Вставить("severity", ВажностьОшибки(цСтрока));
		
		затратыНаИсправление = ЗатратыНаИсправление(цСтрока);
		
		Если ЗначениеЗаполнено(затратыНаИсправление) Тогда
			
			структОшибка.Вставить("effortMinutes", затратыНаИсправление);
			
		КонецЕсли;

		второстепенноеМестонахождение = ВторостепенноеМестонахождение(цСтрока);

		Если второстепенноеМестонахождение.Количество() > 0 Тогда
			
			структОшибка.Вставить("secondaryLocations", второстепенноеМестонахождение);
			
		КонецЕсли;
		
		результат.issues.Добавить(структОшибка);
		
		Если существующиеПравила[ruleId] = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		структПравила = Новый Структура;
		структПравила.Вставить("engineId", источникПроверки);
		структПравила.Вставить("ruleId", ruleId);
		структПравила.Вставить("name", ruleId);
		структПравила.Вставить("type", структОшибка.type);
		структПравила.Вставить("severity", структОшибка.severity);
		структПравила.Вставить("description", структОшибка.primaryLocation.message);
		
		результат.rules.Добавить(структПравила);
		
		существующиеПравила.Вставить(ruleId, Истина);
		
	КонецЦикла;
	
	Возврат результат;
	
КонецФункции

Функция ТипОшибки(Знач пДанные)
	
	// BUG, VULNERABILITY, CODE_SMELL
	
	Если пДанные.Тип = "Ошибка"
		ИЛИ пДанные.Тип = "Ошибка конфигурации" Тогда
		
		Возврат "BUG";
		
	Иначе
		
		Возврат "CODE_SMELL";
		
	КонецЕсли;
	
КонецФункции

Функция ВажностьОшибки(Знач пДанные)
	
	// BLOCKER, CRITICAL, MAJOR, MINOR, INFO
	
	Если пДанные.Тип = "Ошибка"
		ИЛИ пДанные.Тип = "Ошибка конфигурации" Тогда
		
		Возврат "CRITICAL";
		
	ИначеЕсли пДанные.Серьезность = "Предупреждение" Тогда
		
		Возврат "MINOR";
		
	Иначе
		
		Возврат "MINOR";
		
	КонецЕсли;
	
КонецФункции

Функция ЗатратыНаИсправление(Знач пДанные)
	
	Возврат 0;
	
КонецФункции

Функция ВторостепенноеМестонахождение(Знач пДанные)
	
	Возврат Новый Массив;
	
КонецФункции