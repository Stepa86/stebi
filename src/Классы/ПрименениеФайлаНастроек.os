#Использовать logos
#Использовать v8metadata-reader

Перем _Лог;

Перем _ПрименятьНастройки;
Перем _ФайлыОшибок;
Перем _ФайлНастроек;
Перем _ФайлыСИсходнымКодом;
Перем _ФорматОтчета; // Используемый формат отчета

Перем КаталогиИсходников;
Перем _КаталогИсходников; // Каталог исходников по умолчанию

Перем _КешПравил;

Перем _УдалятьПоддержку;
Перем ДанныеПоддержкиПоИсходникам;
Перем КешУровнейПоддержки;

Перем _ФильтрПоПодсистемам;
Перем _ДанныеФильтраПоПодсистемам;

Перем ВАЖНОСТЬ_ПРОПУСТИТЬ;
Перем ДОСТУПНЫЕ_ВАЖНОСТИ;
Перем ДОСТУПНЫЕ_ТИПЫ; // 10.2-
Перем ДОСТУПНЫЕ_КачествоПО; // 10.3+
Перем ДОСТУПНЫЕ_Атрибуты; // 10.3+

#Область ПрограммныйИнтерфейс

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Аргумент(
		"GENERIC_ISSUE_JSON",
		"",
		"Путь к файлам generic-issue.json, на основе которых будет создан файл настроек. Например ./edt-json.json,./acc-generic-issue.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_JSON");
	
	Команда.Опция("s settings", "", "Путь к файлу настроек. Например -s=./generic-issue-settings.json")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_SETTINGS_JSON");
	
	Команда.Опция("src", "", "Путь к каталогу с исходниками. Например -src=./src")
	.ТСтрока()
	.ВОкружении("SRC");
	
	Команда.Опция("r remove_support", "", "Удаляет из отчетов файлы на поддержке. Например -r=0
		|		0 - удалить файлы на замке,
		|		1 - удалить файлы на замке и на поддержке
		|		2 - удалить файлы на замке, на поддержке и снятые с поддержки")
	.ТЧисло()
	.ВОкружении("GENERIC_ISSUE_REMOVE_SUPPORT");
	
	Команда.Опция("f filter_by_subsystem", "", "Фильтр по подсистеме в формате [+/-]Подсистема1.Подсистема2[*][^].
		|		Например, исключение подсистем СтандартныеПодсистемы и ПодключаемоеОборудование и всех дочерних объектов
		|			'-СтандартныеПодсистемы*, -ПодключаемоеОборудование*'")
	.ТСтрока()
	.ВОкружении("GENERIC_ISSUE_FILTER_BY_SUBSYSTEM");

	Команда.Опция("f Format", ТипыФорматаОтчетаСонар.Generic_Issue, "Формат отчета")
		.ТПеречисление()
		.Перечисление(
			ТипыФорматаОтчетаСонар.Generic_Issue,
			ТипыФорматаОтчетаСонар.Generic_Issue,
			ТипыФорматаОтчетаСонар.Описание(ТипыФорматаОтчетаСонар.Generic_Issue))
		.Перечисление(
			ТипыФорматаОтчетаСонар.Generic_Issue_10_3,
			ТипыФорматаОтчетаСонар.Generic_Issue_10_3,
			ТипыФорматаОтчетаСонар.Описание(ТипыФорматаОтчетаСонар.Generic_Issue_10_3));

	Команда.Опция("d debug", Ложь, "Режим отладки")
	.ТБулево();
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	началоОбщегоЗамера = ТекущаяДата();
	
	ИнициализацияПараметров(Команда);
	
	таблицаНастроек = ТаблицаНастроек();
	
	Для каждого цФайл Из _файлыОшибок Цикл
		
		замечанияФайла = ПрочитатьЗамечанияИзФайла(цФайл);

		началоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Если _ФорматОтчета = ТипыФорматаОтчетаСонар.Generic_Issue_10_3 Тогда
			файлИзменен = ПрименитьФайлНастроек_10_3(замечанияФайла, таблицаНастроек);
		Иначе
			файлИзменен = ПрименитьФайлНастроек_Устаревший(замечанияФайла, таблицаНастроек);
		КонецЕсли;
		
		_Лог.Информация("Файл <%1> обработан за %2мс", цФайл, ТекущаяУниверсальнаяДатаВМиллисекундах() - началоЗамера);
		
		ЗаписатьОшибкиВФайл(замечанияФайла, цФайл, файлИзменен);
		
	КонецЦикла;
	
	_Лог.Информация("Общее время обработки: %1с", ТекущаяДата() - началоОбщегоЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app." + ОПриложении.Имя();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализацияПараметров(Знач Команда)
	
	_Лог = Логирование.ПолучитьЛог(ИмяЛога());
	
	Если Команда.ЗначениеОпции("debug") Тогда
		_Лог.УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;

	файлыОшибок = Команда.ЗначениеАргумента("GENERIC_ISSUE_JSON");
	_лог.Информация("GENERIC_ISSUE_JSON = " + файлыОшибок);
	
	путьКФайлуНастроек = Команда.ЗначениеОпции("settings");
	_лог.Информация("settings = " + путьКФайлуНастроек);
	
	путьККаталогуИсходников = Команда.ЗначениеОпции("src");
	_лог.Информация("src = " + путьККаталогуИсходников);
	
	_УдалятьПоддержку = Команда.ЗначениеОпции("remove_support");
	_лог.Информация("remove_support = " + _УдалятьПоддержку);
	
	Если _УдалятьПоддержку = "" Тогда
		_УдалятьПоддержку = Неопределено;
	КонецЕсли;
	
	_ФорматОтчета = Команда.ЗначениеОпции("Format");
	_лог.Информация("Format = " + _ФорматОтчета);

	_ФильтрПоПодсистемам = Команда.ЗначениеОпции("filter_by_subsystem");
	_лог.Информация("filter_by_subsystem = " + _ФильтрПоПодсистемам);
	
	Если ЗначениеЗаполнено(путьКФайлуНастроек) Тогда
		
		_ФайлНастроек = ОбщегоНазначения.АбсолютныйПуть(путьКФайлуНастроек);
		_лог.Информация("Файл настроек = " + _ФайлНастроек);
		
		_ПрименятьНастройки = ОбщегоНазначения.ФайлСуществует(_ФайлНастроек);
		
	Иначе
		
		_ПрименятьНастройки = Ложь;
		
	КонецЕсли;
	
	_файлыОшибок = Новый Массив;
	
	Для каждого цПутьКФайлу Из СтрРазделить(файлыОшибок, ",") Цикл
		
		Если ОбщегоНазначения.ФайлСуществует(цПутьКФайлу) Тогда
			
			файлСОшибками = ОбщегоНазначения.АбсолютныйПуть(цПутьКФайлу);
			
			_файлыОшибок.Добавить(файлСОшибками);
			
			_лог.Отладка("Добавлен файл generic-issue = " + файлСОшибками);
			
		КонецЕсли;
		
	КонецЦикла;
	
	каталоги = ОбщегоНазначения.КаталогиСИсходниками(ПутьККаталогуИсходников, _лог);
	КаталогиИсходников = Новый Массив;

	Для Каждого цКаталог Из каталоги Цикл
		
		КаталогиИсходников.Добавить(цКаталог.ПолноеИмя);

	КонецЦикла;

	Если КаталогиИсходников.Количество() = 0 Тогда
		
		_лог.Ошибка(СтрШаблон("Каталог исходников <%1> не существует. Файлы на поддержке удалены не будут", путьККаталогуИсходников));
		_УдалятьПоддержку = Неопределено;
		_КаталогИсходников = "";
		
	Иначе

		_КаталогИсходников = КаталогиИсходников[0];

	КонецЕсли;
	
	Если Не _ПрименятьНастройки
		И _УдалятьПоддержку = Неопределено Тогда
		_Лог.Ошибка("Должен быть указан файл настроек или уровень удаления поддержки.");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	Если Не _УдалятьПоддержку = Неопределено Тогда
		
		ДанныеПоддержкиПоИсходникам = Новый Соответствие;

		Для Каждого цКаталог Из КаталогиИсходников Цикл
			
			приведенныйПуть = СтрЗаменить(НРег(цКаталог), "\", "/"); // Чтобы при сравнении не расходились слеши

			ДанныеПоддержкиПоИсходникам.Вставить(приведенныйПуть, Новый Поддержка(цКаталог));
			
		КонецЦикла;
		
		КешУровнейПоддержки = Новый Соответствие;

	КонецЕсли;
	
	_ФайлыСИсходнымКодом = Новый Соответствие;
	
	ПодготовитьФильтрПоПодсистемам();
	
КонецПроцедуры

Функция ТаблицаНастроек()
	
	Если _ПрименятьНастройки Тогда
		
		_лог.Информация("Начало чтения файла настроек <%1>", _ФайлНастроек);
		таблицаНастроек = ОбщегоНазначения.ПолучитьТаблицуНастроек(_ФайлНастроек, _Лог);
		_лог.Информация("Из файла настроек прочитано: " + таблицаНастроек.Количество());
		
	Иначе
		
		таблицаНастроек = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Возврат таблицаНастроек;
	
КонецФункции

Функция ПрочитатьЗамечанияИзФайла(Знач пФайл)
	
	замечанияФайла = ОбщегоНазначения.ПрочитатьJSONФайл(пФайл, _Лог);
	
	Если Не ТипЗнч(замечанияФайла) = Тип("Структура") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Если Не замечанияФайла.Свойство("issues") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Если Не ТипЗнч(замечанияФайла.issues) = Тип("Массив") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Возврат замечанияФайла;
	
КонецФункции

Процедура ЗаписатьОшибкиВФайл(Знач пзамечанияФайла, Знач пФайл, пФайлИзменен)
	
	Если пФайлИзменен Тогда
		
		_лог.Информация("Бекап файла: " + пФайл + ".old");
		КопироватьФайл(пФайл, пФайл + ".old");
		
		_лог.Информация("Запись в файл: " + пФайл);
		ОбщегоНазначения.ЗаписатьJSONВФайл(пзамечанияФайла, пФайл, _Лог);
		
	Иначе
		
		_лог.Информация("Изменения в файле не требуются: " + пФайл);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрименитьФайлНастроек_10_3(замечанияФайла, таблицаНастроек)
	
	файлИзменен = Ложь;

	ВАЖНОСТЬ_ПРОПУСТИТЬ = "SKIP";
	ДОСТУПНЫЕ_ВАЖНОСТИ = Новый Массив;
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("HIGH");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MEDIUM");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("LOW");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить(ВАЖНОСТЬ_ПРОПУСТИТЬ);
	
	ДОСТУПНЫЕ_КачествоПО = Новый Массив;
	ДОСТУПНЫЕ_КачествоПО.Добавить("MAINTAINABILITY");
	ДОСТУПНЫЕ_КачествоПО.Добавить("RELIABILITY");
	ДОСТУПНЫЕ_КачествоПО.Добавить("SECURITY");

	ДОСТУПНЫЕ_Атрибуты = Новый Массив;
	ДОСТУПНЫЕ_Атрибуты.Добавить("FORMATTED");
	ДОСТУПНЫЕ_Атрибуты.Добавить("CONVENTIONAL");
	ДОСТУПНЫЕ_Атрибуты.Добавить("IDENTIFIABLE");
	ДОСТУПНЫЕ_Атрибуты.Добавить("CLEAR");
	ДОСТУПНЫЕ_Атрибуты.Добавить("LOGICAL");
	ДОСТУПНЫЕ_Атрибуты.Добавить("COMPLETE");
	ДОСТУПНЫЕ_Атрибуты.Добавить("EFFICIENT");
	ДОСТУПНЫЕ_Атрибуты.Добавить("FOCUSED");
	ДОСТУПНЫЕ_Атрибуты.Добавить("DISTINCT");
	ДОСТУПНЫЕ_Атрибуты.Добавить("MODULAR");
	ДОСТУПНЫЕ_Атрибуты.Добавить("TESTED");
	ДОСТУПНЫЕ_Атрибуты.Добавить("LAWFUL");
	ДОСТУПНЫЕ_Атрибуты.Добавить("TRUSTWORTHY");
	ДОСТУПНЫЕ_Атрибуты.Добавить("RESPECTFUL");

	Результат = ПрименитьНастрокиКПравилам(замечанияФайла, таблицаНастроек);

	Если Результат.ЕстьИзменения Тогда
		файлИзменен = Истина;
	КонецЕсли;

	ЕстьИзмененияВЗамечаниях = ПрименитьНастройкиКЗамечаниям(замечанияФайла, таблицаНастроек, Результат.ПропущенныеПравила);

	Если ЕстьИзмененияВзамечаниях Тогда
		файлИзменен = Истина;
	КонецЕсли;
	
	Возврат файлИзменен;

КонецФункции

Функция ПрименитьФайлНастроек_Устаревший(замечанияФайла, таблицаНастроек)
	
	файлИзменен = Ложь;

	ВАЖНОСТЬ_ПРОПУСТИТЬ = "SKIP";
	ДОСТУПНЫЕ_ВАЖНОСТИ = Новый Массив;
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("BLOCKER");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("CRITICAL");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MAJOR");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("MINOR");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("INFO");
	ДОСТУПНЫЕ_ВАЖНОСТИ.Добавить("SKIP");
	
	ДОСТУПНЫЕ_ТИПЫ = Новый Массив;
	ДОСТУПНЫЕ_ТИПЫ.Добавить("BUG");
	ДОСТУПНЫЕ_ТИПЫ.Добавить("VULNERABILITY");
	ДОСТУПНЫЕ_ТИПЫ.Добавить("CODE_SMELL");
	
	ЕстьИзмененияВЗамечаниях = ПрименитьНастройкиКЗамечаниям(замечанияФайла, таблицаНастроек);

	Если ЕстьИзмененияВзамечаниях Тогда
		файлИзменен = Истина;
	КонецЕсли;

	Возврат файлИзменен;

КонецФункции

Функция ПрименитьНастрокиКПравилам(замечанияФайла, таблицаНастроек)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);
	Результат.Вставить("ПропущенныеПравила", Новый Массив);

	всегоПравил = замечанияФайла.rules.Количество();
	
	Для ц = 1 По всегоПравил Цикл
		
		цПравило = замечанияФайла.rules[всегоПравил - ц];
		
		Для каждого цСтрока Из таблицаНастроек Цикл
			
			Если цПравило.impacts[0].severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
				// Пропуск работает по принципу - применяем первое попавшееся,
				// когда как остальные настройки - последнее попавшееся.
				Прервать;
			КонецЕсли;
			
			Если НастройкаПрименима(цПравило.Id, цСтрока.ruleId) Тогда
			
				Если ПрименитьНастройкуКПравилу(цПравило, цСтрока) Тогда
					
					Результат.ЕстьИзменения = Истина;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
		Если цПравило.impacts[0].severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
				
			замечанияФайла.rules.Удалить(всегоПравил - ц);
			Результат.ЕстьИзменения = Истина;
			Результат.ПропущенныеПравила.Добавить(цПравило.Id);
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПрименитьНастройкуКПравилу(пПравило, Знач пСтрокаНастроек)

	естьИзменения = Ложь;
	заголовокЛога = СтрШаблон("Id: <%1>. Установлено ", пПравило.Id);

	Если Не пСтрокаНастроек.severity = пПравило.impacts[0].severity
		И Не ДОСТУПНЫЕ_ВАЖНОСТИ.Найти(пСтрокаНастроек.severity) = Неопределено Тогда
		
		_лог.Отладка(заголовокЛога + "severity: " + пСтрокаНастроек.severity);
		
		пПравило.impacts[0].severity = пСтрокаНастроек.severity;
		естьИзменения = Истина;
		
	КонецЕсли;
	
	Если Не пСтрокаНастроек.softwareQuality = пПравило.impacts[0].softwareQuality
		И Не ДОСТУПНЫЕ_КачествоПО.Найти(пСтрокаНастроек.softwareQuality) = Неопределено Тогда
		
		_лог.Отладка(заголовокЛога + "softwareQuality: " + пСтрокаНастроек.softwareQuality);
		
		пПравило.impacts[0].softwareQuality = пСтрокаНастроек.softwareQuality;
		естьИзменения = Истина;
		
	КонецЕсли;

	Если Не пСтрокаНастроек.cleanCodeAttribute = пПравило.cleanCodeAttribute
		И Не ДОСТУПНЫЕ_Атрибуты.Найти(пСтрокаНастроек.cleanCodeAttribute) = Неопределено Тогда
		
		_лог.Отладка(заголовокЛога + "cleanCodeAttribute: " + пСтрокаНастроек.cleanCodeAttribute);
		
		пПравило.cleanCodeAttribute = пСтрокаНастроек.cleanCodeAttribute;
		естьИзменения = Истина;
		
	КонецЕсли;

	Возврат естьИзменения;
	
КонецФункции

Функция ПрименитьНастройкиКЗамечаниям(замечанияФайла, таблицаНастроек, пропущенныеПравила = Неопределено)
	
	файлИзменен = Ложь;

	всегоЗамечаний = замечанияФайла.issues.Количество();
	
	Для ц = 1 По всегоЗамечаний Цикл
		
		цЗамечание = замечанияФайла.issues[всегоЗамечаний - ц];
		
		Если ОшибкаВЗамечании(цЗамечание)
			ИЛИ ФайлНаПоддержке(цЗамечание)
			ИЛИ ИсключитьЗамечаниеФильтромПоПодсистеме(цЗамечание)
			ИЛИ ПравилоПропущено(цЗамечание, пропущенныеПравила) Тогда
			
			замечанияФайла.issues.Удалить(всегоЗамечаний - ц);
			файлИзменен = Истина;
			Продолжить;
			
		КонецЕсли;
		
		Если ПрименитьНастройкиКЗамечанию(цЗамечание, таблицаНастроек) Тогда
			
			файлИзменен = Истина;
			
		КонецЕсли;
		
		Если _ФорматОтчета = ТипыФорматаОтчетаСонар.Generic_Issue И цЗамечание.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
			
			замечанияФайла.issues.Удалить(всегоЗамечаний - ц);
			файлИзменен = Истина;
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат файлИзменен;

КонецФункции

Функция ПрименитьНастройкиКЗамечанию(пОшибка, таблицаНастроек)
	
	естьИзменения = Ложь;
	
	ruleId = пОшибка.ruleId;
	message = пОшибка.primaryLocation.message;
	
	filePath = ПутьКФайлуСЗамечаниями(пОшибка, естьИзменения);
	
	Для каждого цСтрока Из таблицаНастроек Цикл
		
		Если _ФорматОтчета = ТипыФорматаОтчетаСонар.Generic_Issue И пОшибка.severity = ВАЖНОСТЬ_ПРОПУСТИТЬ Тогда
			// Пропуск работает по принципу - применяем первое попавшееся,
			// когда как остальные настройки - последнее попавшееся.
			Прервать;
		КонецЕсли;
		
		Если НастройкаПрименима(ruleId, цСтрока.ruleId)
			И НастройкаПрименима(filePath, цСтрока.filePath)
			И НастройкаПрименима(message, цСтрока.message) Тогда

			Если ПрименитьНастройкуКЗамечанию(цСтрока, пОшибка) Тогда
				естьИзменения = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат естьИзменения;
	
КонецФункции

Функция ПрименитьНастройкуКЗамечанию(Знач пСтрокаНастроек, пОшибка)

	естьИзменения = Ложь;
	заголовокЛога = СтрШаблон("ruleId: <%1>, message: <%2>, filePath: <%3>. Установлено ",
			пОшибка.ruleId,
			пОшибка.primaryLocation.message,
			пОшибка.primaryLocation.filePath);

	Если ТипЗнч(пСтрокаНастроек.effortMinutes) = Тип("Число")
		И Не пСтрокаНастроек.effortMinutes = пОшибка.effortMinutes Тогда
		
		_лог.Отладка(заголовокЛога + "effortMinutes: " + пСтрокаНастроек.effortMinutes);
		
		пОшибка.effortMinutes = пСтрокаНастроек.effortMinutes;
		естьИзменения = Истина;
		
	КонецЕсли;
	
	Если _ФорматОтчета = ТипыФорматаОтчетаСонар.Generic_Issue Тогда
		
		Если Не пСтрокаНастроек.severity = пОшибка.severity
			И Не ДОСТУПНЫЕ_ВАЖНОСТИ.Найти(пСтрокаНастроек.severity) = Неопределено Тогда
			
			_лог.Отладка(заголовокЛога + "severity: " + пСтрокаНастроек.severity);
			
			пОшибка.severity = пСтрокаНастроек.severity;
			естьИзменения = Истина;
			
		КонецЕсли;
		
		Если Не пСтрокаНастроек.type = пОшибка.type
			И Не ДОСТУПНЫЕ_ТИПЫ.Найти(пСтрокаНастроек.type) = Неопределено Тогда
			
			_лог.Отладка(заголовокЛога + "type: " + пСтрокаНастроек.type);
			
			пОшибка.type = пСтрокаНастроек.type;
			естьИзменения = Истина;
			
		КонецЕсли;

	КонецЕсли;

	Возврат естьИзменения;
	
КонецФункции

Функция ПутьКФайлуСЗамечаниями(пОшибка, пЕстьИзменения)
	
	путьКФайлуСЗамечанием = пОшибка.primaryLocation.filePath;

	filePath = ОбеспечитьПутьКФайлуСИсходнымКодом(путьКФайлуСЗамечанием);
	
	Возврат filePath;

	// Раньше тут подменялся путь в файле на абсолютный. Я не вспомнил зачем и почему. Если где-то что-то отвалится, то вернуть как было.
	
КонецФункции

Функция НастройкаПрименима(Знач пСтрока, Знач пШаблон)
	
	Если пСтрока = пШаблон Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(пШаблон) Тогда
		Возврат Истина;
	КонецЕсли;
	
	значениеИзКеша = ПолучитьИзКеша(пСтрока, пШаблон);
	
	Если Не значениеИзКеша = Неопределено Тогда
		
		Возврат значениеИзКеша;
		
	КонецЕсли;
	
	этоПоискПоРегВыр = СтрНайти(пШаблон, "*") > 0; // Для оптимизации считаем, что если и используются рег. выражения, то со звездой
	
	Если этоПоискПоРегВыр Тогда
		
		Попытка
			
			регВыражение = Новый РегулярноеВыражение(пШаблон);
			настройкаПрименима = регВыражение.Совпадает(пСтрока);
			
		Исключение
			
			_Лог.Ошибка("Ошибка сравнения ""%1"" с рег. выражением ""%2""", пСтрока, пШаблон);
			_Лог.Ошибка(ОписаниеОшибки());
			настройкаПрименима = Ложь;
			
		КонецПопытки;
		
	Иначе
		
		настройкаПрименима = Ложь;
		
	КонецЕсли;
	
	ПоместитьВКеш(пСтрока, пШаблон, настройкаПрименима);
	
	Возврат настройкаПрименима;
	
КонецФункции

#Область Кеш

Функция ПолучитьИзКеша(Знач пСтрока, Знач пШаблон)
	
	ИнициализироватьКеш(пСтрока, пШаблон);
	
	Возврат _КешПравил[пШаблон][пСтрока];
	
КонецФункции

Процедура ПоместитьВКеш(Знач пСтрока, Знач пШаблон, Знач пЗначение)
	
	ИнициализироватьКеш(пСтрока, пШаблон);
	
	_КешПравил[пШаблон].Вставить(пСтрока, пЗначение);
	
КонецПроцедуры

Процедура ИнициализироватьКеш(Знач пСтрока, Знач пШаблон)
	
	Если _КешПравил = Неопределено Тогда
		
		_КешПравил = Новый Соответствие;
		
	КонецЕсли;
	
	КешПоШаблону = _КешПравил[пШаблон];
	
	Если КешПоШаблону = Неопределено Тогда
		
		КешПоШаблону = Новый Соответствие;
		_КешПравил.Вставить(пШаблон, КешПоШаблону);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ОшибкаВЗамечании(Знач пОшибка)
	
	путьКФайлу = пОшибка.primaryLocation.filePath;
	
	Если Не ЗначениеЗаполнено(путьКФайлу) Тогда
		
		_Лог.Ошибка("Не указан путь для ошибки: %1. %2", пОшибка.ruleId, пОшибка.primaryLocation.message);
		
		Возврат Истина;
		
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ФайлНаПоддержке(Знач пОшибка)
	
	Если _УдалятьПоддержку = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	значениеИзКеша = КешУровнейПоддержки[пОшибка.primaryLocation.filePath];
	
	Если Не значениеИзКеша = Неопределено Тогда
		Возврат значениеИзКеша;
	КонецЕсли;

	путьКФайлу = ОбеспечитьПутьКФайлуСИсходнымКодом(пОшибка.primaryLocation.filePath);
	
	даныеПоддержки = ДанныеПоддержкиДляФайла(путьКФайлу);
	
	Если даныеПоддержки = Неопределено Тогда
		КешУровнейПоддержки.Вставить(пОшибка.primaryLocation.filePath, Ложь);
		Возврат Ложь;
	КонецЕсли;

	текУровень = даныеПоддержки.Уровень(путьКФайлу);
	
	файлНаПоддержке = текУровень <= _УдалятьПоддержку;

	КешУровнейПоддержки.Вставить(пОшибка.primaryLocation.filePath, файлНаПоддержке);
	
	Если ФайлНаПоддержке Тогда
		
		_Лог.Отладка("Файл %1 на поддержке. Замечания по нему удалены", пОшибка.primaryLocation.filePath);

	КонецЕсли;

	Возврат файлНаПоддержке;
	
КонецФункции

Функция ДанныеПоддержкиДляФайла(Знач ПутьКФайлу)
	
	Для Каждого цКлючИЗначение Из ДанныеПоддержкиПоИсходникам Цикл
		
		приведенныйПутьКФайлу = СтрЗаменить(НРег(ПутьКФайлу), "\", "/");

		Если СтрНачинаетсяС(приведенныйПутьКФайлу, цКлючИЗначение.Ключ) Тогда
			Возврат цКлючИЗначение.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	_лог.Предупреждение("Не удалось получить данные поддержки для файла %1", ПутьКФайлу);
	
	массивИсточников = Новый Массив;
	Для Каждого цКлючИЗначение Из ДанныеПоддержкиПоИсходникам Цикл
		
		массивИсточников.Добавить(цКлючИЗначение.Ключ);
		
	КонецЦикла;

	_лог.Предупреждение("	Доступные источники: [%1]", СтрСоединить(массивИсточников, ", "));

	Возврат Неопределено;
	
КонецФункции

Функция ИсключитьЗамечаниеФильтромПоПодсистеме(Знач пОшибка)
	
	Если Не _ДанныеФильтраПоПодсистемам.ЕстьОтбор
		И Не _ДанныеФильтраПоПодсистемам.ЕстьИсключения Тогда

		Возврат Ложь;

	КонецЕсли;
	
	путьКФайлу = ОбеспечитьПутьКФайлуСИсходнымКодом(пОшибка.primaryLocation.filePath);
	
	значениеКеша = _ДанныеФильтраПоПодсистемам.КешФайлов[путьКФайлу];

	Если Не значениеКеша = Неопределено Тогда

		Возврат значениеКеша;

	КонецЕсли;

	Если _ДанныеФильтраПоПодсистемам.ЕстьОтбор Тогда

		Для каждого цРазрешенныйОбъект Из _ДанныеФильтраПоПодсистемам.Отбор Цикл

			Если СтрНачинаетсяС(путьКФайлу, цРазрешенныйОбъект) Тогда

				_ДанныеФильтраПоПодсистемам.КешФайлов.Вставить(путьКФайлу, Ложь);
				Возврат Ложь;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если _ДанныеФильтраПоПодсистемам.ЕстьИсключения Тогда

		Для каждого цРазрешенныйОбъект Из _ДанныеФильтраПоПодсистемам.Исключения Цикл

			Если СтрНачинаетсяС(путьКФайлу, цРазрешенныйОбъект) Тогда

				_ДанныеФильтраПоПодсистемам.КешФайлов.Вставить(путьКФайлу, Истина);
				Возврат Истина;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ОбеспечитьПутьКФайлуСИсходнымКодом(Знач пИмяФайла)
	
	существующийПуть = _ФайлыСИсходнымКодом[пИмяФайла];
	
	Если Не существующийПуть = Неопределено Тогда
		
		Возврат существующийПуть;
		
	КонецЕсли;
	
	абсолютныйПутьКФайлу = ОбщегоНазначения.АбсолютныйПуть(пИмяФайла);
	
	Если ОбщегоНазначения.ФайлСуществует(абсолютныйПутьКФайлу)
		ИЛИ ВРег(абсолютныйПутьКФайлу) = ВРег(СтрЗаменить(пИмяФайла, "\", "/")) // может быть указан абсолютный путь и файл не существовать
		Тогда
		
		_ФайлыСИсходнымКодом.Вставить(пИмяФайла, абсолютныйПутьКФайлу);
		Возврат абсолютныйПутьКФайлу;
		
	КонецЕсли;
	
	путьСУчетомКаталогаИсходников = ОбъединитьПути(_КаталогИсходников, пИмяФайла);
	
	абсолютныйПутьКФайлу = ОбщегоНазначения.АбсолютныйПуть(путьСУчетомКаталогаИсходников);
	
	Если ОбщегоНазначения.ФайлСуществует(абсолютныйПутьКФайлу) Тогда
		
		_ФайлыСИсходнымКодом.Вставить(пИмяФайла, абсолютныйПутьКФайлу);
		Возврат абсолютныйПутьКФайлу;
		
	КонецЕсли;
	
	_ФайлыСИсходнымКодом.Вставить(пИмяФайла, пИмяФайла);
	Возврат пИмяФайла;
	
КонецФункции

Процедура ПодготовитьФильтрПоПодсистемам()
	
	_ДанныеФильтраПоПодсистемам = Новый Структура;
	
	_ДанныеФильтраПоПодсистемам.Вставить("ЕстьОтбор", Ложь);
	_ДанныеФильтраПоПодсистемам.Вставить("ЕстьИсключения", Ложь);
	
	Если Не ЗначениеЗаполнено(_ФильтрПоПодсистемам) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	инфоОКонфигурации = Новый ИнформацияОКонфигурации(_КаталогИсходников);
	
	_ФильтрПоПодсистемам = СтрЗаменить(_ФильтрПоПодсистемам, ";", ",");
	
	объектыОтбор = Новый Соответствие;
	объектыИсключения = Новый Соответствие;

	ОПЕРАЦИЯ_ДОБАВЛЕНИЕ = "+";
	ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ = "-";
	
	Для каждого цПодсистема Из СтрРазделить(_ФильтрПоПодсистемам, ",") Цикл
		
		имяПодсистемы = СтрЗаменить(цПодсистема, """", "");

		_лог.Информация("Обработка фрагмента: %1", имяПодсистемы);

		Если СтрНачинаетсяС(имяПодсистемы, "-") Тогда
			
			операция = ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ;
			
		Иначе
			
			операция = ОПЕРАЦИЯ_ДОБАВЛЕНИЕ;
			
		КонецЕсли;
		
		учитыватьРодительскиеПодсистемы = СтрНайти(имяПодсистемы, "^") > 0;
		учитыватьПодчиненныеПодсистемы = СтрНайти(имяПодсистемы, "*") > 0;
		
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "+", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "-", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "*", "");
		имяПодсистемы = СтрЗаменить(имяПодсистемы, "^", "");
		
		объекты = инфоОКонфигурации.ОбъектыПодсистемы(имяПодсистемы, учитыватьПодчиненныеПодсистемы, учитыватьРодительскиеПодсистемы);

		Если операция = ОПЕРАЦИЯ_ИСКЛЮЧЕНИЕ Тогда

			ЗаполнитьСоответствиеПоМассиву(объектыИсключения, объекты);
			УдалитьЭлементыСоответствия(объектыОтбор, объекты);

			_ДанныеФильтраПоПодсистемам.Вставить("ЕстьИсключения", Истина);

			_лог.Информация("	Добавлены объекты к исключению по подсистеме %1: %2", имяПодсистемы, объекты.Количество());

		Иначе

			ЗаполнитьСоответствиеПоМассиву(объектыОтбор, объекты);
			УдалитьЭлементыСоответствия(объектыИсключения, объекты);

			_ДанныеФильтраПоПодсистемам.Вставить("ЕстьОтбор", Истина);

			_лог.Информация("	Добавлены объекты к отбору по подсистеме %1: %2", имяПодсистемы, объекты.Количество());

		КонецЕсли;
		
	КонецЦикла;

	ГенераторПутей = Новый Путь1СПоМетаданным(_КаталогИсходников);

	_ДанныеФильтраПоПодсистемам.Вставить("Отбор", МассивПутейОбъектов(объектыОтбор, ГенераторПутей));
	_ДанныеФильтраПоПодсистемам.Вставить("Исключения", МассивПутейОбъектов(объектыИсключения, ГенераторПутей));
	
	_ДанныеФильтраПоПодсистемам.Вставить("КешФайлов", Новый Соответствие);

	_лог.Информация("К отбору по подсистемам: %1", _ДанныеФильтраПоПодсистемам.Отбор.Количество());

	Для каждого цОбъект Из _ДанныеФильтраПоПодсистемам.Отбор Цикл

		_лог.Отладка("	Добавлено к отбору: %1", цОбъект);

	КонецЦикла;

	_лог.Информация("К исключению по подсистемам: %1", _ДанныеФильтраПоПодсистемам.Исключения.Количество());

	Для каждого цОбъект Из _ДанныеФильтраПоПодсистемам.Исключения Цикл

		_лог.Отладка("	Добавлено к исключению: %1", цОбъект);

	КонецЦикла;

КонецПроцедуры

Функция МассивПутейОбъектов(Знач пСоответствиеСПутями, Знач пГенераторПутей)

	массивПутей = Новый Массив;

	Для каждого цЭлемент Из пСоответствиеСПутями Цикл

		путьКОбъекту = пГенераторПутей.Путь(цЭлемент.Ключ);
		путьКОбъекту = ОбщегоНазначения.АбсолютныйПуть(путьКОбъекту);

		Если ОбщегоНазначения.КаталогСуществует(путьКОбъекту) Тогда

			массивПутей.Добавить(путьКОбъекту + "/");

		Иначе

			_Лог.Ошибка("Фильтр по подсистемам. Не удалось получить путь к <%1>. Полученный путь %2 не существует.", цЭлемент.Ключ, путьКОбъекту);

		КонецЕсли;

	КонецЦикла;

	Возврат массивПутей;
	
КонецФункции

Процедура ЗаполнитьСоответствиеПоМассиву(пСоответствие, Знач пМассив)
	
	Для каждого цЭлемент Из пМассив Цикл
		
		пСоответствие.Вставить(цЭлемент, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЭлементыСоответствия(пСоответствие, Знач пМассив)
	
	Для каждого цЭлемент Из пМассив Цикл
		
		Если Не пСоответствие[цЭлемент] = Неопределено Тогда
			
			пСоответствие.Удалить(цЭлемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПравилоПропущено(пЗамечание, пПропущенныеПравила)
	
	ПравилоПропущено = Ложь;

	Если пПропущенныеПравила = Неопределено Тогда
		Возврат ПравилоПропущено;
	КонецЕсли;

	ПравилоПропущено = Не пПропущенныеПравила.Найти(пЗамечание.ruleId) = Неопределено;
	
	Возврат ПравилоПропущено;

КонецФункции

#КонецОбласти
