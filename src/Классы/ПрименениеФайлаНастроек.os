#Использовать logos
#Использовать v8metadata-reader

Перем _Лог;

Перем _ПрименятьНастройки;
Перем _ФайлыОшибок;
Перем _ФайлНастроек;

Перем _ПрименениеНастроек; // Интерфейс применения настроек нужного формата

#Область ПрограммныйИнтерфейс

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Аргумент(
		"GENERIC_ISSUE_JSON",
		"",
		"Путь к файлам generic-issue.json, на основе которых будет создан файл настроек. Например ./edt-json.json,./acc-generic-issue.json")
		.ТСтрока()
		.ВОкружении("GENERIC_ISSUE_JSON");
	
	Команда.Опция("s settings", "", "Путь к файлу настроек. Например -s=./generic-issue-settings.json")
		.ТСтрока()
		.ВОкружении("GENERIC_ISSUE_SETTINGS_JSON");
	
	Команда.Опция("src", "", "Путь к каталогу с исходниками. Например -src=./src")
		.ТСтрока()
		.ВОкружении("SRC");
	
	Команда.Опция("r remove_support", "", "Удаляет из отчетов файлы на поддержке. Например -r=0
		|		0 - удалить файлы на замке,
		|		1 - удалить файлы на замке и на поддержке
		|		2 - удалить файлы на замке, на поддержке и снятые с поддержки")
		.ТЧисло()
		.ВОкружении("GENERIC_ISSUE_REMOVE_SUPPORT");
	
	Команда.Опция("filter_by_subsystem", "", "Фильтр по подсистеме в формате [+/-]Подсистема1.Подсистема2[*][^].
		|		Например, исключение подсистем СтандартныеПодсистемы и ПодключаемоеОборудование и всех дочерних объектов
		|			'-СтандартныеПодсистемы*, -ПодключаемоеОборудование*'")
		.ТСтрока()
		.ВОкружении("GENERIC_ISSUE_FILTER_BY_SUBSYSTEM");
	
	Команда.Опция("f Format", ТипыФорматаОтчетаСонар.Generic_Issue, "Формат отчета")
		.ТПеречисление()
		.Перечисление(
			ТипыФорматаОтчетаСонар.Generic_Issue,
			ТипыФорматаОтчетаСонар.Generic_Issue,
			ТипыФорматаОтчетаСонар.Описание(ТипыФорматаОтчетаСонар.Generic_Issue))
		.Перечисление(
			ТипыФорматаОтчетаСонар.Generic_Issue_10_3,
			ТипыФорматаОтчетаСонар.Generic_Issue_10_3,
			ТипыФорматаОтчетаСонар.Описание(ТипыФорматаОтчетаСонар.Generic_Issue_10_3));
	
	Команда.Опция("d debug", Ложь, "Режим отладки")
		.ТБулево();
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	началоОбщегоЗамера = ТекущаяДата();
	
	ИнициализацияПараметров(Команда);
	
	таблицаНастроек = ТаблицаНастроек();
	
	Для Каждого цФайл Из _файлыОшибок Цикл
		
		замечанияФайла = ПрочитатьЗамечанияИзФайла(цФайл);
		
		началоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		файлИзменен = ПрименитьФайлНастроек(замечанияФайла, таблицаНастроек);
		
		_Лог.Информация("Файл <%1> обработан за %2мс", цФайл, ТекущаяУниверсальнаяДатаВМиллисекундах() - началоЗамера);
		
		ЗаписатьОшибкиВФайл(замечанияФайла, цФайл, файлИзменен);
		
	КонецЦикла;
	
	_Лог.Информация("Общее время обработки: %1с", ТекущаяДата() - началоОбщегоЗамера);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяЛога() Экспорт
	
	Возврат "oscript.app." + ОПриложении.Имя();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализацияПараметров(Знач Команда)
	
	Если Команда.ЗначениеОпции("debug") Тогда
		_Лог.УстановитьУровень(УровниЛога.Отладка);
	КонецЕсли;
	
	файлыОшибок = Команда.ЗначениеАргумента("GENERIC_ISSUE_JSON");
	_лог.Информация("GENERIC_ISSUE_JSON = " + файлыОшибок);
	
	путьКФайлуНастроек = Команда.ЗначениеОпции("settings");
	_лог.Информация("settings = " + путьКФайлуНастроек);
	
	путьККаталогуИсходников = Команда.ЗначениеОпции("src");
	_лог.Информация("src = " + путьККаталогуИсходников);
	
	удалятьПоддержку = Команда.ЗначениеОпции("remove_support");
	_лог.Информация("remove_support = " + удалятьПоддержку);
	
	Если удалятьПоддержку = "" Тогда
		удалятьПоддержку = Неопределено;
	КонецЕсли;
	
	форматОтчета = Команда.ЗначениеОпции("Format");
	_лог.Информация("Format = " + форматОтчета);
	
	фильтрПоПодсистемам = Команда.ЗначениеОпции("filter_by_subsystem");
	_лог.Информация("filter_by_subsystem = " + фильтрПоПодсистемам);
	
	Если ЗначениеЗаполнено(путьКФайлуНастроек) Тогда
		
		_ФайлНастроек = ОбщегоНазначения.АбсолютныйПуть(путьКФайлуНастроек);
		_лог.Информация("Файл настроек = " + _ФайлНастроек);
		
		_ПрименятьНастройки = ОбщегоНазначения.ФайлСуществует(_ФайлНастроек);
		
	Иначе
		
		_ПрименятьНастройки = Ложь;
		
	КонецЕсли;
	
	_файлыОшибок = Новый Массив;
	
	Для Каждого цПутьКФайлу Из СтрРазделить(файлыОшибок, ",") Цикл
		
		Если ОбщегоНазначения.ФайлСуществует(цПутьКФайлу) Тогда
			
			файлСОшибками = ОбщегоНазначения.АбсолютныйПуть(цПутьКФайлу);
			
			_файлыОшибок.Добавить(файлСОшибками);
			
			_лог.Отладка("Добавлен файл generic-issue = " + файлСОшибками);
			
		КонецЕсли;
		
	КонецЦикла;
	
	каталоги = ОбщегоНазначения.КаталогиСИсходниками(ПутьККаталогуИсходников, _лог);
	КаталогиИсходников = Новый Массив;
	
	Для Каждого цКаталог Из каталоги Цикл
		
		КаталогиИсходников.Добавить(цКаталог.ПолноеИмя);
		
	КонецЦикла;
	
	Если НЕ _ПрименятьНастройки
		И удалятьПоддержку = Неопределено Тогда
		_Лог.Ошибка("Должен быть указан файл настроек или уровень удаления поддержки.");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	Если форматОтчета = ТипыФорматаОтчетаСонар.Generic_Issue_10_3 Тогда
		
		_ПрименениеНастроек = Настройки_Generic_Issue_10_3;
		
	Иначе
		
		_ПрименениеНастроек = Настройки_Generic_Issue;
		
	КонецЕсли;

	_ПрименениеНастроек.Инициализировать(КаталогиИсходников, удалятьПоддержку, фильтрПоПодсистемам, _Лог);
	
КонецПроцедуры

Функция ПрименитьФайлНастроек(замечанияФайла, таблицаНастроек)
	
	файлИзменен = Ложь;
	
	Результат = _ПрименениеНастроек.ПрименитьНастройкиКПравилам(замечанияФайла, таблицаНастроек);
	
	Если Результат.ЕстьИзменения Тогда
		файлИзменен = Истина;
	КонецЕсли;
	
	ЕстьИзмененияВЗамечаниях = _ПрименениеНастроек.ПрименитьНастройкиКЗамечаниям(
			замечанияФайла,
			таблицаНастроек,
			Результат.ПропущенныеПравила);
	
	Если ЕстьИзмененияВзамечаниях Тогда
		файлИзменен = Истина;
	КонецЕсли;
	
	Возврат файлИзменен;
	
КонецФункции

Функция ТаблицаНастроек()
	
	Если _ПрименятьНастройки Тогда
		
		_лог.Информация("Начало чтения файла настроек <%1>", _ФайлНастроек);
		таблицаНастроек = ОбщегоНазначения.ПолучитьТаблицуНастроек(_ФайлНастроек, _Лог);
		_лог.Информация("Из файла настроек прочитано: " + таблицаНастроек.Количество());
		
	Иначе
		
		таблицаНастроек = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Возврат таблицаНастроек;
	
КонецФункции

Функция ПрочитатьЗамечанияИзФайла(Знач пФайл)
	
	замечанияФайла = ОбщегоНазначения.ПрочитатьJSONФайл(пФайл, _Лог);
	
	Если НЕ ТипЗнч(замечанияФайла) = Тип("Структура") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Если НЕ замечанияФайла.Свойство("issues") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Если НЕ ТипЗнч(замечанияФайла.issues) = Тип("Массив") Тогда
		
		_Лог.Ошибка("Не поддерживаемая структура файла: " + пФайл);
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Возврат замечанияФайла;
	
КонецФункции

Процедура ЗаписатьОшибкиВФайл(Знач пзамечанияФайла, Знач пФайл, пФайлИзменен)
	
	Если пФайлИзменен Тогда
		
		_лог.Информация("Бекап файла: " + пФайл + ".old");
		КопироватьФайл(пФайл, пФайл + ".old");
		
		_лог.Информация("Запись в файл: " + пФайл);
		ОбщегоНазначения.ЗаписатьJSONВФайл(пзамечанияФайла, пФайл, _Лог);
		
	Иначе
		
		_лог.Информация("Изменения в файле не требуются: " + пФайл);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

_Лог = Логирование.ПолучитьЛог(ИмяЛога());